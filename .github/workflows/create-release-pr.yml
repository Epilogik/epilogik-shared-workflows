name: Create Release PR

on:
  workflow_call:
    inputs:
      base_branch:
        description: 'Base branch (e.g., develop)'
        required: false
        type: string
        default: 'develop'
      bump_type:
        description: 'Version bump type (major, minor, patch, or specific version)'
        required: false
        type: string
        default: 'patch'
      tag_prefix:
        description: 'Tag prefix (e.g., "v")'
        required: false
        type: string
        default: 'v'
      auto_merge:
        description: 'Enable auto-merge on PR'
        required: false
        type: boolean
        default: false
    outputs:
      release_version:
        description: 'Calculated release version'
        value: ${{ jobs.create-pr.outputs.version }}
      release_branch:
        description: 'Release branch name'
        value: ${{ jobs.create-pr.outputs.branch }}
      pr_number:
        description: 'Pull request number'
        value: ${{ jobs.create-pr.outputs.pr_number }}

jobs:
  create-pr:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.next_version }}
      branch: ${{ steps.version.outputs.release_branch }}
      pr_number: ${{ steps.create-pr.outputs.pr_number }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.base_branch }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate next version
        id: version
        uses: Epilogik/epilogik-shared-workflows/actions/semantic-version@v1
        with:
          bump_type: ${{ inputs.bump_type }}
          tag_prefix: ${{ inputs.tag_prefix }}

      - name: Check existing branch and PR
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_BRANCH="${{ steps.version.outputs.release_branch }}"
          
          # Check if release branch exists
          if git ls-remote --heads origin "$RELEASE_BRANCH" | grep -q "$RELEASE_BRANCH"; then
            echo "branch_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "branch_exists=false" >> "$GITHUB_OUTPUT"
          fi
          
          # Check if PR exists (from release branch to base branch)
          PR_COUNT=$(gh pr list --head "$RELEASE_BRANCH" --base ${{ inputs.base_branch }} --state open --json number --jq length)
          if [ "$PR_COUNT" -gt 0 ]; then
            PR_NUMBER=$(gh pr list --head "$RELEASE_BRANCH" --base ${{ inputs.base_branch }} --state open --json number --jq '.[0].number')
            echo "pr_exists=true" >> "$GITHUB_OUTPUT"
            echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          else
            echo "pr_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create or update release branch
        id: branch
        run: |
          RELEASE_BRANCH="${{ steps.version.outputs.release_branch }}"

          if [ "${{ steps.check.outputs.branch_exists }}" == "false" ]; then
            echo "🆕 Creating $RELEASE_BRANCH from ${{ inputs.base_branch }}..."
            git checkout -b "$RELEASE_BRANCH"
            git push origin "$RELEASE_BRANCH"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "diff_count=1" >> $GITHUB_OUTPUT
          else
            echo "🔄 Release branch already exists, checking for updates..."
            git fetch origin "$RELEASE_BRANCH"
            git fetch origin ${{ inputs.base_branch }}
            
            # Check if base branch has new commits compared to release branch
            DIFF_COUNT=$(git rev-list --count origin/$RELEASE_BRANCH..origin/${{ inputs.base_branch }})
            
            if [ "$DIFF_COUNT" -gt 0 ]; then
              echo "📝 Found $DIFF_COUNT new commits in ${{ inputs.base_branch }}"
              echo "🔄 Updating release branch with latest changes..."
              git checkout "$RELEASE_BRANCH"
              git merge origin/${{ inputs.base_branch }} --no-ff -m "chore: merge latest changes from ${{ inputs.base_branch }}"
              git push origin "$RELEASE_BRANCH"
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "ℹ️  Release branch is up to date with ${{ inputs.base_branch }}"
              echo "has_changes=true" >> $GITHUB_OUTPUT
            fi
            echo "diff_count=$DIFF_COUNT" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        if: steps.branch.outputs.has_changes == 'true'
        id: notes
        uses: Epilogik/epilogik-shared-workflows/actions/release-notes@v1
        with:
          from_tag: ${{ steps.version.outputs.current_tag }}
          to_ref: ${{ inputs.base_branch }}
          format: 'markdown'
          group_by: 'type'

      - name: Create or update PR
        id: create-pr
        if: steps.branch.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_BRANCH="${{ steps.version.outputs.release_branch }}"
          VERSION="${{ steps.version.outputs.next_version }}"
          
          # Create PR body (avoiding YAML conflicts)
          PR_TITLE="🚀 Release v$VERSION"
          PR_BODY="Release v$VERSION from branch $RELEASE_BRANCH"
          
          # Add version info if available
          if [ -n "${{ steps.version.outputs.current_tag }}" ]; then
            PR_BODY="$PR_BODY\n\nPrevious version: ${{ steps.version.outputs.current_tag }}"
          fi
          
          # Add release notes if available  
          if [ -n "${{ steps.notes.outputs.release_notes }}" ]; then
            PR_BODY="$PR_BODY\n\nChanges:\n${{ steps.notes.outputs.release_notes }}"
          fi

          if [ "${{ steps.check.outputs.pr_exists }}" == "false" ]; then
            echo "🆕 Creating new PR from $RELEASE_BRANCH to ${{ inputs.base_branch }}..."
            PR_URL=$(gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --base ${{ inputs.base_branch }} \
              --head "$RELEASE_BRANCH")
            
            PR_NUMBER=$(echo "$PR_URL" | sed 's/.*\/\([0-9]*\)$/\1/')
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "✅ PR #$PR_NUMBER created successfully"
            
            if [ "${{ inputs.auto_merge }}" == "true" ]; then
              gh pr merge "$PR_NUMBER" --auto --squash
              echo "🤖 Auto-merge enabled for PR #$PR_NUMBER"
            else
              echo "ℹ️  Auto-merge disabled"
            fi
          else
            echo "🔄 Updating existing PR #${{ steps.check.outputs.pr_number }}..."
            COMMENT_BODY="🔄 Updated $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            gh pr comment "${{ steps.check.outputs.pr_number }}" --body "$COMMENT_BODY"
            echo "pr_number=${{ steps.check.outputs.pr_number }}" >> $GITHUB_OUTPUT
          fi

      - name: Summary
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Release v${{ steps.version.outputs.next_version }}"
          echo "🌿 Branch: ${{ steps.version.outputs.release_branch }}"
          echo "📝 Commits: ${{ steps.notes.outputs.commit_count }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
