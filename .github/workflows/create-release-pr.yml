name: Create Release PR

on:
  workflow_call:
    inputs:
      base_branch:
        description: 'Base branch (e.g., develop)'
        required: false
        type: string
        default: 'develop'
      bump_type:
        description: 'Version bump type (major, minor, patch, or specific version)'
        required: false
        type: string
        default: 'patch'
      tag_prefix:
        description: 'Tag prefix (e.g., "v")'
        required: false
        type: string
        default: 'v'
      auto_merge:
        description: 'Enable auto-merge on PR'
        required: false
        type: boolean
        default: false
    outputs:
      release_version:
        description: 'Calculated release version'
        value: ${{ jobs.create-pr.outputs.version }}
      release_branch:
        description: 'Release branch name'
        value: ${{ jobs.create-pr.outputs.branch }}
      pr_number:
        description: 'Pull request number'
        value: ${{ jobs.create-pr.outputs.pr_number }}

jobs:
  create-pr:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.next_version }}
      branch: ${{ steps.version.outputs.release_branch }}
      pr_number: ${{ steps.create-pr.outputs.pr_number }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.base_branch }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate next version
        id: version
        run: |
          # Get latest tag
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "${{ inputs.tag_prefix }}0.0.0")
          echo "Current tag: $LATEST_TAG"
          
          # Extract version without prefix
          CURRENT_VERSION=$(echo "$LATEST_TAG" | sed 's/^${{ inputs.tag_prefix }}//')
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version parts
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Bump version based on bump_type
          case "${{ inputs.bump_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
            *)
              # If it's a specific version, use it
              if [[ "${{ inputs.bump_type }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                CURRENT_VERSION="${{ inputs.bump_type }}"
                IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
                MAJOR=${VERSION_PARTS[0]}
                MINOR=${VERSION_PARTS[1]}
                PATCH=${VERSION_PARTS[2]}
              else
                PATCH=$((PATCH + 1))
              fi
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="${{ inputs.tag_prefix }}$NEW_VERSION"
          RELEASE_BRANCH="release/$NEW_VERSION"
          
          echo "next_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "next_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "current_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
          
          echo "📋 Version calculated:"
          echo "  Current: $LATEST_TAG"
          echo "  Next: $NEW_TAG"
          echo "  Branch: $RELEASE_BRANCH"

      - name: Check existing branch and PR
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_BRANCH="${{ steps.version.outputs.release_branch }}"
          
          # Check if release branch exists
          if git ls-remote --heads origin "$RELEASE_BRANCH" | grep -q "$RELEASE_BRANCH"; then
            echo "branch_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "branch_exists=false" >> "$GITHUB_OUTPUT"
          fi
          
          # Check if PR exists (from release branch to base branch)
          PR_COUNT=$(gh pr list --head "$RELEASE_BRANCH" --base ${{ inputs.base_branch }} --state open --json number --jq length)
          if [ "$PR_COUNT" -gt 0 ]; then
            PR_NUMBER=$(gh pr list --head "$RELEASE_BRANCH" --base ${{ inputs.base_branch }} --state open --json number --jq '.[0].number')
            echo "pr_exists=true" >> "$GITHUB_OUTPUT"
            echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          else
            echo "pr_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create or update release branch
        id: branch
        run: |
          RELEASE_BRANCH="${{ steps.version.outputs.release_branch }}"
          BASE_BRANCH="${{ inputs.base_branch }}"
          
          echo "🔍 Checking release branch: $RELEASE_BRANCH"
          
          # Fetch all branches to ensure we have latest info
          git fetch --all --prune
          
          if [ "${{ steps.check.outputs.branch_exists }}" == "false" ]; then
            echo "🆕 Creating new release branch: $RELEASE_BRANCH"
            git checkout -b "$RELEASE_BRANCH"
            
            # Create a version bump commit to ensure there's a difference
            mkdir -p .github
            echo "${{ steps.version.outputs.next_version }}" > .github/VERSION
            git add .github/VERSION
            git commit -m "chore: bump version to ${{ steps.version.outputs.next_version }}"
            
            git push origin "$RELEASE_BRANCH"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            echo "diff_count=1" >> "$GITHUB_OUTPUT"
          else
            echo "🔄 Release branch exists, checking if update needed..."
            git checkout "$RELEASE_BRANCH"
            
            # Check if there are differences
            DIFF_COUNT=$(git rev-list --count "origin/$RELEASE_BRANCH..origin/$BASE_BRANCH")
            
            if [ "$DIFF_COUNT" -gt 0 ]; then
              echo "📝 Found $DIFF_COUNT new commits, updating release branch..."
              git merge "origin/$BASE_BRANCH" --no-ff -m "chore: merge latest changes from $BASE_BRANCH"
              
              # Update version file
              mkdir -p .github
              echo "${{ steps.version.outputs.next_version }}" > .github/VERSION
              git add .github/VERSION
              git commit -m "chore: update version to ${{ steps.version.outputs.next_version }}"
              
              git push origin "$RELEASE_BRANCH"
            fi
            
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            echo "diff_count=$DIFF_COUNT" >> "$GITHUB_OUTPUT"
          fi
          
          echo "✅ Release branch ready: $RELEASE_BRANCH"

      - name: Generate release notes
        if: steps.branch.outputs.has_changes == 'true'
        id: notes
        run: |
          echo "release_notes=Release notes will be generated automatically" >> $GITHUB_OUTPUT
          echo "commit_count=1" >> $GITHUB_OUTPUT

      - name: Create or update PR
        id: create-pr
        if: steps.branch.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_BRANCH="${{ steps.version.outputs.release_branch }}"
          VERSION="${{ steps.version.outputs.next_version }}"
          BASE_BRANCH="${{ inputs.base_branch }}"
          
          echo "� PR Configuration:"
          echo "  From: $RELEASE_BRANCH"
          echo "  To: $BASE_BRANCH"
          echo "  Version: $VERSION"
          
          # Simple PR body
          PR_TITLE="Release v$VERSION"
          PR_BODY="Automated release PR for version $VERSION"
          
          if [ "${{ steps.check.outputs.pr_exists }}" == "false" ]; then
            echo "🆕 Creating new release PR..."
            
            # Create PR with simple approach
            gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --base "$BASE_BRANCH" \
              --head "$RELEASE_BRANCH"
            
            # Get PR number
            PR_NUMBER=$(gh pr list --head "$RELEASE_BRANCH" --base "$BASE_BRANCH" --state open --json number --jq '.[0].number')
            echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
            echo "✅ PR #$PR_NUMBER created"
            
          else
            echo "🔄 PR already exists: #${{ steps.check.outputs.pr_number }}"
            echo "pr_number=${{ steps.check.outputs.pr_number }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Summary
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Release v${{ steps.version.outputs.next_version }}"
          echo "🌿 Branch: ${{ steps.version.outputs.release_branch }}"
          echo "📝 Commits: ${{ steps.notes.outputs.commit_count }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
