name: Deploy Container to Server

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment (staging/production/development)'
        required: true
        type: string
      docker_image:
        description: 'Docker image to deploy (e.g., ghcr.io/owner/repo:tag)'
        required: true
        type: string
      container_name:
        description: 'Container name to use'
        required: true
        type: string
      container_port:
        description: 'Internal container port'
        required: true
        type: string
      host_port:
        description: 'Host port to map to'
        required: true
        type: string
      docker_network:
        description: 'Docker network name'
        required: false
        type: string
        default: 'epilogik-net'
      wait_for_health:
        description: 'Wait for container to be healthy'
        required: false
        type: boolean
        default: true
      cleanup_images:
        description: 'Cleanup old Docker images after deployment'
        required: false
        type: boolean
        default: true
      health_check_url:
        description: 'URL to check for application health (optional)'
        required: false
        type: string
        default: ''
      health_check_timeout:
        description: 'Health check timeout in seconds'
        required: false
        type: number
        default: 300
      env_vars:
        description: 'Environment variables for container (JSON format)'
        required: false
        type: string
        default: '{}'
      volumes:
        description: 'Volume mounts for container (JSON array format)'
        required: false
        type: string
        default: '[]'
      restart_policy:
        description: 'Container restart policy'
        required: false
        type: string
        default: 'unless-stopped'
      deploy_strategy:
        description: 'Deployment strategy (rolling/blue-green/recreate)'
        required: false
        type: string
        default: 'rolling'
      rollback_on_failure:
        description: 'Rollback to previous version on deployment failure'
        required: false
        type: boolean
        default: true
    secrets:
      ssh_host:
        description: 'SSH hostname or IP address'
        required: true
      ssh_user:
        description: 'SSH username'
        required: true
      ssh_key:
        description: 'SSH private key'
        required: true
      ssh_port:
        description: 'SSH port number'
        required: false
    outputs:
      deployment_status:
        description: 'Deployment status (success/failed/rolled-back)'
        value: ${{ jobs.deploy.outputs.status }}
      container_id:
        description: 'Deployed container ID'
        value: ${{ jobs.deploy.outputs.container_id }}
      previous_image:
        description: 'Previous container image (for rollback)'
        value: ${{ jobs.deploy.outputs.previous_image }}
      deployment_time:
        description: 'Deployment duration in seconds'
        value: ${{ jobs.deploy.outputs.deployment_time }}

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    name: üöÄ Deploy Container
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: ${{ inputs.environment }}
    outputs:
      status: ${{ steps.deployment.outputs.status }}
      container_id: ${{ steps.deployment.outputs.container_id }}
      previous_image: ${{ steps.deployment.outputs.previous_image }}
      deployment_time: ${{ steps.deployment.outputs.deployment_time }}
    
    steps:
      - name: ‚úÖ Validate deployment inputs
        uses: ./../../.github/actions/deploy-validate
        with:
          environment: ${{ inputs.environment }}
          deploy_strategy: ${{ inputs.deploy_strategy }}
          docker_image: ${{ inputs.docker_image }}

      - name: üîß Setup SSH connection
        uses: ./../../.github/actions/deploy-ssh-setup
        with:
          ssh_port: ${{ secrets.ssh_port || '22' }}

      - name: üîç Pre-deployment checks
        id: pre-checks
        uses: ./../../.github/actions/deploy-prechecks
        with:
          container_name: ${{ inputs.container_name }}
          host_port: ${{ inputs.host_port }}

      - name: üöÄ Deploy container
        id: deployment
        run: |
          echo "üöÄ Starting container deployment..."
          START_TIME=$(date +%s)

          # Normalize image locally (reuse the same rules as remote)
          IMAGE_TO_PULL="${{ inputs.docker_image }}"
          echo "üì• Pulling image: $IMAGE_TO_PULL (remote will pull as well)"

          # Call composite action that handles remote pull & run
          uses: ./../../.github/actions/deploy-remote-run
          with:
            container_name: ${{ inputs.container_name }}
            docker_image: ${{ inputs.docker_image }}
            docker_network: ${{ inputs.docker_network }}
            host_port: ${{ inputs.host_port }}
            container_port: ${{ inputs.container_port }}
            deploy_strategy: ${{ inputs.deploy_strategy }}
            restart_policy: ${{ inputs.restart_policy }}
            env_vars: ${{ inputs.env_vars }}
            volumes: ${{ inputs.volumes }}

          END_TIME=$(date +%s)
          DEPLOYMENT_TIME=$((END_TIME - START_TIME))
          echo "deployment_time=$DEPLOYMENT_TIME" >> "$GITHUB_OUTPUT"
          REMOTE_DEPLOY
          DEPLOY_OUT=$(cat /tmp/epilogik_deploy.out 2>/dev/null || true)
          echo "$DEPLOY_OUT"
          # Parse markers emitted by remote script
          CONTAINER_ID_VAL=$(echo "$DEPLOY_OUT" | grep '^CONTAINER_ID=' | cut -d'=' -f2- | tr -d '\r' || true)
          PREVIOUS_IMAGE_VAL=$(echo "$DEPLOY_OUT" | grep '^PREVIOUS_IMAGE=' | cut -d'=' -f2- | tr -d '\r' || true)
          STATUS_VAL=$(echo "$DEPLOY_OUT" | grep '^STATUS=' | cut -d'=' -f2- | tr -d '\r' || true)

          if [ -n "$CONTAINER_ID_VAL" ]; then
            echo "container_id=$CONTAINER_ID_VAL" >> "$GITHUB_OUTPUT"
          fi
          if [ -n "$PREVIOUS_IMAGE_VAL" ]; then
            echo "previous_image=$PREVIOUS_IMAGE_VAL" >> "$GITHUB_OUTPUT"
          fi
          if [ -n "$STATUS_VAL" ]; then
            echo "status=$STATUS_VAL" >> "$GITHUB_OUTPUT"
          fi

          # Calculate deployment time
          END_TIME=$(date +%s)
          DEPLOYMENT_TIME=$((END_TIME - START_TIME))
          echo "deployment_time=$DEPLOYMENT_TIME" >> "$GITHUB_OUTPUT"

          echo "‚è±Ô∏è Deployment completed in ${DEPLOYMENT_TIME} seconds"

      - name: üîç Post-deployment verification
        if: steps.deployment.outputs.status == 'success'
        run: |
          echo "üîç Running post-deployment verification..."
          
          SSH_PORT="${{ secrets.ssh_port || '22' }}"
          
          # Run remote post-verify and save stdout to a temp file, then read it
          ssh -p $SSH_PORT ${{ secrets.ssh_user }}@${{ secrets.ssh_host }} 'bash -s' <<'REMOTE_POST' > /tmp/epilogik_postverify.out
            echo "üìä Container status:"
            docker ps --filter "name=${{ inputs.container_name }}" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            echo ""
            echo "üíæ Container resource usage:"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" ${{ inputs.container_name }}

            echo ""
            echo "üîó Network connectivity:"
            docker exec ${{ inputs.container_name }} ping -c 3 google.com || true
          REMOTE_POST
          POSTVERIFY_OUT=$(cat /tmp/epilogik_postverify.out 2>/dev/null || true)
          echo "$POSTVERIFY_OUT"

      - name: üìä Generate deployment summary
        if: always()
        run: |
          echo "## üöÄ Container Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment Status
          echo "### üìä Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ${{ steps.deployment.outputs.status || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | \`${{ inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Strategy | ${{ inputs.deploy_strategy }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Duration | ${{ steps.deployment.outputs.deployment_time || 'N/A' }}s |" >> $GITHUB_STEP_SUMMARY
          echo "| Image | \`${{ inputs.docker_image }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Container | \`${{ inputs.container_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Network | \`${{ inputs.docker_network }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Port Mapping | \`${{ inputs.host_port }}:${{ inputs.container_port }}\` |" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.deployment.outputs.container_id }}" ]; then
            echo "| Container ID | \`${{ steps.deployment.outputs.container_id }}\` |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "${{ steps.deployment.outputs.previous_image }}" ] && [ "${{ steps.deployment.outputs.previous_image }}" != "none" ]; then
            echo "| Previous Image | \`${{ steps.deployment.outputs.previous_image }}\` |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Configuration
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚öôÔ∏è Configuration" >> $GITHUB_STEP_SUMMARY
          echo "| Feature | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Health Checks | ${{ inputs.wait_for_health && '‚úÖ Enabled' || '‚ùå Disabled' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Image Cleanup | ${{ inputs.cleanup_images && '‚úÖ Enabled' || '‚ùå Disabled' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rollback on Failure | ${{ inputs.rollback_on_failure && '‚úÖ Enabled' || '‚ùå Disabled' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Restart Policy | \`${{ inputs.restart_policy }}\` |" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ inputs.health_check_url }}" ]; then
            echo "| Health Check URL | ${{ inputs.health_check_url }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Results
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.deployment.outputs.status }}" == "success" ]; then
            echo "‚úÖ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor application logs and metrics" >> $GITHUB_STEP_SUMMARY
            echo "- Verify all functionality is working as expected" >> $GITHUB_STEP_SUMMARY
            echo "- Run integration tests if available" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.deployment.outputs.status }}" == "rolled-back" ]; then
            echo "üîÑ **Deployment failed but was rolled back successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check deployment logs for failure reason" >> $GITHUB_STEP_SUMMARY
            echo "- Fix the issue and retry deployment" >> $GITHUB_STEP_SUMMARY
            echo "- Previous version is currently running" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Deployment failed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Troubleshooting Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Check container logs: \`docker logs ${{ inputs.container_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify image exists and is accessible" >> $GITHUB_STEP_SUMMARY
            echo "3. Check port availability and networking" >> $GITHUB_STEP_SUMMARY
            echo "4. Verify environment variables and volumes" >> $GITHUB_STEP_SUMMARY
            echo "5. Check server resources (CPU, memory, disk)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üßπ Cleanup SSH
        if: always()
        run: |
          echo "üßπ Cleaning up SSH configuration..."
          rm -f ~/.ssh/id_rsa
          echo "‚úÖ SSH cleanup completed"