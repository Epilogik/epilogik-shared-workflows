name: .NET CI

on:
  workflow_call:
    inputs:
      dotnet_version:
        description: '.NET version to use (e.g., 8.0.x, 9.0.x)'
        required: false
        type: string
        default: '8.0.x'
      configuration:
        description: 'Build configuration (Debug/Release)'
        required: false
        type: string
        default: 'Release'
      min_coverage:
        description: 'Minimum code coverage percentage (0-100)'
        required: false
        type: number
        default: 80
      solution_path:
        description: 'Path to solution file (optional, auto-detect if empty)'
        required: false
        type: string
        default: ''
      project_path:
        description: 'Path to specific project file (optional)'
        required: false
        type: string
        default: ''
      run_tests:
        description: 'Whether to run unit tests'
        required: false
        type: boolean
        default: true
      run_integration_tests:
        description: 'Whether to run integration tests'
        required: false
        type: boolean
        default: false
      upload_coverage:
        description: 'Whether to upload coverage reports'
        required: false
        type: boolean
        default: true
      upload_test_results:
        description: 'Whether to upload test results'
        required: false
        type: boolean
        default: true
      enable_caching:
        description: 'Enable NuGet package caching'
        required: false
        type: boolean
        default: true
      fail_fast:
        description: 'Fail fast on first error'
        required: false
        type: boolean
        default: true
      additional_args:
        description: 'Additional arguments for dotnet commands'
        required: false
        type: string
        default: ''
    outputs:
      coverage_percentage:
        description: 'Code coverage percentage'
        value: ${{ jobs.ci.outputs.coverage }}
      test_result:
        description: 'Test result status'
        value: ${{ jobs.ci.outputs.test_status }}
      build_artifact:
        description: 'Build artifact name'
        value: ${{ jobs.ci.outputs.artifact_name }}
      test_count:
        description: 'Total number of tests executed'
        value: ${{ jobs.ci.outputs.test_count }}
      failed_tests:
        description: 'Number of failed tests'
        value: ${{ jobs.ci.outputs.failed_tests }}
      build_version:
        description: 'Build version/commit hash'
        value: ${{ jobs.ci.outputs.build_version }}

jobs:
  ci:
    name: 🔨 Build, Test & Quality
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}
      test_status: ${{ steps.test.outputs.test_outcome }}
      artifact_name: ${{ steps.artifacts.outputs.artifact_name }}
      test_count: ${{ steps.test.outputs.test_count }}
      failed_tests: ${{ steps.test.outputs.failed_tests }}
      build_version: ${{ steps.setup.outputs.build_version }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: ⚙️ Setup .NET environment
        id: setup
        uses: ./../../.github/actions/dotnet-ci/setup
        with:
          dotnet_version: ${{ inputs.dotnet_version }}
          solution_path: ${{ inputs.solution_path }}
          project_path: ${{ inputs.project_path }}

      - name: 📦 Restore dependencies
        uses: ./../../.github/actions/dotnet-ci/restore
        with:
          solution_path: ${{ steps.setup.outputs.solution_path }}
          dotnet_version: ${{ inputs.dotnet_version }}
          enable_caching: ${{ inputs.enable_caching }}
          additional_args: ${{ inputs.additional_args }}

      - name: 🔨 Build solution
        uses: ./../../.github/actions/dotnet-ci/build
        with:
          solution_path: ${{ steps.setup.outputs.solution_path }}
          configuration: ${{ inputs.configuration }}
          build_version: ${{ steps.setup.outputs.build_version }}
          fail_fast: ${{ inputs.fail_fast }}
          additional_args: ${{ inputs.additional_args }}

      - name: 🧪 Run tests
        if: inputs.run_tests
        id: test
        uses: ./../../.github/actions/dotnet-ci/test
        with:
          configuration: ${{ inputs.configuration }}
          test_projects: ${{ steps.setup.outputs.test_projects }}
          integration_test_projects: ${{ steps.setup.outputs.integration_test_projects }}
          solution_path: ${{ steps.setup.outputs.solution_path }}
          run_tests: ${{ inputs.run_tests }}
          run_integration_tests: ${{ inputs.run_integration_tests }}
          upload_coverage: ${{ inputs.upload_coverage }}

      - name: 📊 Process coverage
        if: inputs.run_tests && inputs.upload_coverage
        id: coverage
        uses: ./../../.github/actions/dotnet-ci/coverage
        with:
          min_coverage: ${{ inputs.min_coverage }}
          upload_coverage: ${{ inputs.upload_coverage }}

      - name: 📦 Create artifacts
        id: artifacts
        uses: ./../../.github/actions/dotnet-ci/artifacts
        with:
          configuration: ${{ inputs.configuration }}
          build_version: ${{ steps.setup.outputs.build_version }}
          solution_path: ${{ steps.setup.outputs.solution_path }}
          project_path: ${{ steps.setup.outputs.project_path }}
          upload_test_results: ${{ inputs.upload_test_results }}
          dotnet_version: ${{ inputs.dotnet_version }}

      - name: 📋 Generate summary
        if: always()
        shell: bash
        run: |
          echo "## 🔨 .NET CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Build Metrics" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| .NET Version | ${{ inputs.dotnet_version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration | ${{ inputs.configuration }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Version | \`${{ steps.setup.outputs.build_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Solution | ${{ steps.setup.outputs.solution_path || 'Auto-detected' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.run_tests }}" == "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Tests Status | ${{ steps.test.outputs.test_outcome }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Total Tests | ${{ steps.test.outputs.test_count || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Failed Tests | ${{ steps.test.outputs.failed_tests || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Passed Tests | ${{ steps.test.outputs.passed_tests || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ inputs.upload_coverage }}" == "true" ]; then
              echo "| Code Coverage | ${{ steps.coverage.outputs.coverage || 'N/A' }}% |" >> $GITHUB_STEP_SUMMARY
              echo "| Min Coverage | ${{ inputs.min_coverage }}% |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "| Artifact | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build Artifact | ${{ steps.artifacts.outputs.artifact_name || 'Not created' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All quality gates passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Quality gates failed!**" >> $GITHUB_STEP_SUMMARY
          fi