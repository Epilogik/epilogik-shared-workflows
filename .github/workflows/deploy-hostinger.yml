name: Deploy to Hostinger

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment (staging/production)'
        required: true
        type: string
      compose_files:
        description: 'Docker compose files to deploy (comma separated)'
        required: false
        type: string
        default: 'docker-compose.infra.yml,docker-compose.services.yml'
      docker_network:
        description: 'Docker network name'
        required: false
        type: string
        default: 'epilogik-net'
      wait_for_health:
        description: 'Wait for services to be healthy'
        required: false
        type: boolean
        default: true
      cleanup_images:
        description: 'Cleanup old Docker images'
        required: false
        type: boolean
        default: true
      source_path:
        description: 'Source path for compose files (e.g., staging/)'
        required: false
        type: string
        default: ''
    secrets:
      deploy_path:
        description: 'Deployment path on server'
        required: true
      ssh_host:
        required: true
      ssh_user:
        required: true
      ssh_port:
        required: false
      ssh_key:
        required: true
    outputs:
      deployment_status:
        description: 'Deployment status'
        value: ${{ jobs.deploy.outputs.status }}
      deployed_services:
        description: 'Deployed services'
        value: ${{ jobs.deploy.outputs.services }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      status: ${{ steps.deploy.outputs.deployment_status }}
      services: ${{ steps.deploy.outputs.deployed_services }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.ssh_key }}" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Verify key format
          if ! ssh-keygen -l -f ~/.ssh/deploy_key > /dev/null 2>&1; then
            echo "❌ SSH key format is invalid"
            exit 1
          fi
          
          ssh-keyscan -p ${{ secrets.ssh_port || '22' }} -H ${{ secrets.ssh_host }} >> ~/.ssh/known_hosts 2>/dev/null
          echo "✅ SSH setup completed"

      - name: Create deployment directory on VPS
        run: |
          ssh -i ~/.ssh/deploy_key \
            -p ${{ secrets.ssh_port || '22' }} \
            ${{ secrets.ssh_user }}@${{ secrets.ssh_host }} \
            "mkdir -p ${{ secrets.deploy_path }}/${{ inputs.environment }}"

      - name: Copy Docker Compose files to VPS
        run: |
          # Parse comma-separated compose files
          IFS=',' read -ra FILES <<< "${{ inputs.compose_files }}"
          
          for file in "${FILES[@]}"; do
            file=$(echo "$file" | xargs) # trim whitespace
            source_file="${{ inputs.source_path }}${file}"
            
            if [ ! -f "$source_file" ]; then
              source_file="${{ inputs.environment }}/${file}"
            fi
            
            if [ -f "$source_file" ]; then
              echo "📦 Copying $source_file..."
              scp -i ~/.ssh/deploy_key \
                -P ${{ secrets.ssh_port || '22' }} \
                "$source_file" \
                ${{ secrets.ssh_user }}@${{ secrets.ssh_host }}:${{ secrets.deploy_path }}/${{ inputs.environment }}/
            else
              echo "⚠️  Warning: $source_file not found"
            fi
          done

      - name: Create Docker network if not exists
        run: |
          ssh -i ~/.ssh/deploy_key \
            -p ${{ secrets.ssh_port || '22' }} \
            ${{ secrets.ssh_user }}@${{ secrets.ssh_host }} \
            "docker network inspect ${{ inputs.docker_network }} >/dev/null 2>&1 || docker network create ${{ inputs.docker_network }}"

      - name: Deploy services with Docker Compose
        run: |
          # Parse comma-separated compose files and build docker-compose command
          IFS=',' read -ra FILES <<< "${{ inputs.compose_files }}"
          COMPOSE_CMD="docker-compose"
          
          for file in "${FILES[@]}"; do
            file=$(echo "$file" | xargs) # trim whitespace
            COMPOSE_CMD="$COMPOSE_CMD -f $file"
          done
          
          ssh -i ~/.ssh/deploy_key \
            -p ${{ secrets.ssh_port || '22' }} \
            ${{ secrets.ssh_user }}@${{ secrets.ssh_host }} \
            "cd ${{ secrets.deploy_path }}/${{ inputs.environment }} && $COMPOSE_CMD up -d --remove-orphans"

      - name: Wait for services to be healthy
        if: inputs.wait_for_health
        run: |
          ssh -i ~/.ssh/deploy_key \
            -p ${{ secrets.ssh_port || '22' }} \
            ${{ secrets.ssh_user }}@${{ secrets.ssh_host }} \
            "cd ${{ secrets.deploy_path }}/${{ inputs.environment }} && \
             echo '⏳ Waiting for services to be healthy...' && \
             for i in {1..30}; do \
               if docker-compose ps | grep -q 'unhealthy'; then \
                 echo '⏳ Some services still unhealthy, waiting...'; \
                 sleep 2; \
               else \
                 echo '✅ All services are healthy'; \
                 break; \
               fi; \
             done"

      - name: Cleanup old Docker images
        if: inputs.cleanup_images
        run: |
          ssh -i ~/.ssh/deploy_key \
            -p ${{ secrets.ssh_port || '22' }} \
            ${{ secrets.ssh_user }}@${{ secrets.ssh_host }} \
            "docker image prune -af --filter 'until=24h' || true"

      - name: Deployment Summary
        if: success()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Deployment Summary"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Environment:  ${{ inputs.environment }}"
          echo "Host:         ${{ secrets.ssh_host }}"
          echo "Path:         ${{ secrets.deploy_path }}/${{ inputs.environment }}"
          echo "Files:        ${{ inputs.compose_files }}"
          echo "Status:       ✅ SUCCESS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Notify on failure
        if: failure()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ Deployment Failed"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Environment:  ${{ inputs.environment }}"
          echo "Host:         ${{ secrets.ssh_host }}"
          echo "Please check logs above for details"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit 1
