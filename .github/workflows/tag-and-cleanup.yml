name: Tag and Cleanup Release

on:
  workflow_call:
    inputs:
      tag_prefix:
        description: 'Tag prefix (e.g., "v")'
        required: false
        type: string
        default: 'v'
      delete_release_branch:
        description: 'Delete release branch after tagging'
        required: false
        type: boolean
        default: true
      create_github_release:
        description: 'Create GitHub Release'
        required: false
        type: boolean
        default: true
      main_branch:
        description: 'Main branch name'
        required: false
        type: string
        default: 'main'
    outputs:
      tag_created:
        description: 'Whether a tag was created'
        value: ${{ jobs.tag-and-cleanup.outputs.tag_created }}
      tag_name:
        description: 'Created tag name'
        value: ${{ jobs.tag-and-cleanup.outputs.tag_name }}
      release_url:
        description: 'GitHub Release URL'
        value: ${{ jobs.tag-and-cleanup.outputs.release_url }}

jobs:
  tag-and-cleanup:
    runs-on: ubuntu-latest
    outputs:
      tag_created: ${{ steps.detect-release.outputs.is_release }}
      tag_name: ${{ steps.detect-release.outputs.next_tag }}
      release_url: ${{ steps.create-release.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Detect merged release branch
        id: detect-release
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          if echo "$COMMIT_MSG" | grep -q "Merge pull request.*release/"; then
            VERSION=$(echo "$COMMIT_MSG" | grep -oP 'release/\K[0-9]+\.[0-9]+\.[0-9]+' | head -1)
            
            if [ -n "$VERSION" ]; then
              echo "is_release=true" >> $GITHUB_OUTPUT
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "release_branch=release/$VERSION" >> $GITHUB_OUTPUT
              echo "next_tag=${{ inputs.tag_prefix }}$VERSION" >> $GITHUB_OUTPUT
              echo "✅ Detected release merge: v$VERSION"
            else
              echo "is_release=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if tag already exists
        if: steps.detect-release.outputs.is_release == 'true'
        id: check-tag
        run: |
          TAG="${{ steps.detect-release.outputs.next_tag }}"
          git fetch --tags
          
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "⚠️  Tag $TAG already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "✅ Tag $TAG does not exist"
          fi

      - name: Generate release notes
        if: steps.detect-release.outputs.is_release == 'true' && steps.check-tag.outputs.tag_exists == 'false'
        id: notes
        uses: Epilogik/epilogik-shared-workflows/actions/release-notes@v1
        with:
          format: 'markdown'
          group_by: 'type'

      - name: Create Git Tag
        if: steps.detect-release.outputs.is_release == 'true' && steps.check-tag.outputs.tag_exists == 'false'
        run: |
          TAG="${{ steps.detect-release.outputs.next_tag }}"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "✅ Tag $TAG created"

      - name: Create GitHub Release
        if: steps.detect-release.outputs.is_release == 'true' && steps.check-tag.outputs.tag_exists == 'false' && inputs.create_github_release
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ steps.detect-release.outputs.next_tag }}"
          VERSION="${{ steps.detect-release.outputs.version }}"
          
          RELEASE_BODY="## 🚀 Release $TAG

          ### 📝 Changes
          ${{ steps.notes.outputs.release_notes }}

          ### 🎯 Deployment Information
          - **Staging:** ✅ Deployed and tested
          - **Production:** ✅ Deployed and verified
          - **Release Date:** $(date -u +'%Y-%m-%d')

          ### 📦 Artifacts
          - All services deployed and running
          - Docker images updated

          ${{ steps.notes.outputs.compare_url }}

          ---
          **Released on:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')"

          RELEASE_URL=$(gh release create "$TAG" \
            --title "Release $TAG" \
            --notes "$RELEASE_BODY" \
            --latest)
          
          echo "url=$RELEASE_URL" >> $GITHUB_OUTPUT
          echo "✅ GitHub Release created: $RELEASE_URL"

      - name: Delete release branch
        if: steps.detect-release.outputs.is_release == 'true' && inputs.delete_release_branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_BRANCH="${{ steps.detect-release.outputs.release_branch }}"
          
          if git ls-remote --heads origin "$RELEASE_BRANCH" | grep -q "$RELEASE_BRANCH"; then
            git push origin --delete "$RELEASE_BRANCH"
            echo "✅ Release branch $RELEASE_BRANCH deleted"
          else
            echo "ℹ️  Release branch already deleted"
          fi

      - name: Summary
        if: steps.detect-release.outputs.is_release == 'true'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 Release ${{ steps.detect-release.outputs.next_tag }} Finalized"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          if [ "${{ steps.check-tag.outputs.tag_exists }}" == "false" ]; then
            echo "✅ Tag created: ${{ steps.detect-release.outputs.next_tag }}"
            ${{ inputs.create_github_release && 'echo "✅ GitHub Release created"' || '' }}
          else
            echo "ℹ️  Tag already existed"
          fi
          ${{ inputs.delete_release_branch && 'echo "✅ Release branch cleaned up"' || '' }}
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: No release detected
        if: steps.detect-release.outputs.is_release == 'false'
        run: |
          echo "ℹ️  Not a release merge - no action taken"
